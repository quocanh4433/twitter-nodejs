openapi: 3.0.3,
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
  - url: http://localhost:4000
tags:
  - name: users
    description: API invole tiwtter user
  - name: bookmark
    description: API invole bookmark for tweet
  - name: search
    description: API invole search tweet
  - name: conversation
    description: API invole conversation
  - name: tweets
    description: API invole tweet
  - name: medias
    description: API invole upload file
paths:
  # User
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: Login
      operationId: login
      requestBody:
        description: Login request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: '#/components/schemas/Authentication'
        '422':
          description: Invalid input
  /users/register:
    post:
      tags:
        - users
      summary: Register
      description: Register
      requestBody:
        description: Register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register success
                  result:
                    $ref: '#/components/schemas/Authentication'
        '400':
          description: Register failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register failed
        '422':
          description: Invalid Input
  /users/me:
    get:
      tags:
        - users
      summary: Get user info
      description: Get user info
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Get user info successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/logout:
    post:
      tags:
        - users
      summary: Logout
      description: Logout
      operationId: logout
      security:
        - BearerAuth: []
      requestBody:
        description: Logout
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4NzBlZmEwYTU4NWViMjdkNDdlZTk4IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDkwMjAyODUsImV4cCI6MTcxNzY2MDI4NX0.91aHRvJ1rE9j78_jUgtx49d_CWjvTcbXEZfloOFGaCI
        required: true
      responses:
        '200':
          description: Logout success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successfully
        '422':
          description: Invalid input
  /users/refresh-token:
    post:
      tags:
        - users
      summary: Refresh token
      description: Refresh token
      operationId: refresh token
      security:
        - BearerAuth: []
      requestBody:
        description: Refresh token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          description: Refresh token successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login success
                  result:
                    $ref: '#/components/schemas/Authentication'
        '422':
          description: Invalid input
  /users/verify-email:
    post:
      tags:
        - users
      summary: Verify email
      description: Verify email
      operationId: verify email
      security:
        - BearerAuth: []
      requestBody:
        description: Verify email
        content:
          application/json:
            schema:
              type: object
              properties:
                email_verify_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4NzBlZmEwYTU4NWViMjdkNDdlZTk4IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDkwMjAyODUsImV4cCI6MTcxNzY2MDI4NX0.91aHRvJ1rE9j78_jUgtx49d_CWjvTcbXEZfloOFGaCI
        required: true
      responses:
        '200':
          description: Verify email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verify email successfully
        '422':
          description: Invalid input
  /users/resend-verify-email:
    post:
      tags:
        - users
      summary: Resend Verify email
      description: Resend Verify email
      operationId: resend verify email
      security:
        - BearerAuth: []
      requestBody:
        description: Resend Verify email
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Resend verify email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resend verify email successfully
        '422':
          description: Invalid input
  /users/forgot-password:
    post:
      tags:
        - users
      summary: Forgot password
      description: Forgot password
      operationId: forgot password
      requestBody:
        description: Forgot password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: email
                  example: johncarter@gmail.com
        required: true
      responses:
        '200':
          description: Resend verify email successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resend verify email successfully
        '422':
          description: Invalid input
  /users/verify-forgot-password:
    post:
      tags:
        - users
      summary: Verify forgot password
      description: Verify forgot password
      operationId: verify forgot password
      requestBody:
        description: Verify forgot password
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4NzBlZmEwYTU4NWViMjdkNDdlZTk4IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDkwMjAyODUsImV4cCI6MTcxNzY2MDI4NX0.91aHRvJ1rE9j78_jUgtx49d_CWjvTcbXEZfloOFGaCI
        required: true
      responses:
        '200':
          description: Verify forgot password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verify forgot password successfully
        '422':
          description: Invalid input
  /users/reset-password:
    post:
      tags:
        - users
      summary: Reset password
      description: Reset password
      operationId: reset password
      requestBody:
        description: Reset password
        content:
          application/json:
            schema:
              type: object
              properties:
                forgot_password_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU4NzBlZmEwYTU4NWViMjdkNDdlZTk4IiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE3MDkwMjAyODUsImV4cCI6MTcxNzY2MDI4NX0.91aHRvJ1rE9j78_jUgtx49d_CWjvTcbXEZfloOFGaCI
                confirm_password:
                  type: string
                  example: Qa@12345
                password:
                  type: string
                  example: Qa@1234
        required: true
      responses:
        '200':
          description: Reset password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Reset password successfully
        '422':
          description: Invalid input
  /users/change-password:
    post:
      tags:
        - users
      summary: Change password
      description: Change password
      operationId: change password
      security:
        - BearerAuth: []
      requestBody:
        description: Reset password
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: ab@123
                confirm_password:
                  type: string
                  example: Qa@12345
                password:
                  type: string
                  example: Qa@1234
        required: true
      responses:
        '200':
          description: Change password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: Change password successfully
        '422':
          description: Invalid input
  /users/{username}:
    get:
      tags:
        - users
      summary: Get profile by user name
      description: Get profile by user name
      operationId: get profile by user name
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get profile successfully
        '422':
          description: Invalid input
  /users/follow:
    post:
      tags:
        - users
      summary: Follow
      description: Follow
      operationId: follow
      security:
        - BearerAuth: []
      requestBody:
        description: Follow password
        content:
          application/json:
            schema:
              type: object
              properties:
                followed_user_id:
                  type: MongoId
                  example: 65854378d5ed1370b388486c
        required: true
      responses:
        '200':
          description: Follow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Follow successfully
        '422':
          description: Invalid input
  /users/follow/{user_id}:
    delete:
      tags:
        - users
      summary: Unfollow
      description: Unfollow
      operationId: unfollow
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: MongoId
      responses:
        '200':
          description: Unfollow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unfollow successfully
        '422':
          description: Invalid input
  /users/update-profile:
    patch:
      tags:
        - users
      summary: Update profile
      description: Update profile
      operationId: Update profile
      security:
        - BearerAuth: []
      requestBody:
        description: Update profile request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBodyUpdate'
      responses:
        '200':
          description: Unfollow successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unfollow successfully
        '422':
          description: Invalid input

  # Bookmark
  /bookmarks:
    post:
      tags:
        - bookmark
      summary: Bookmark
      description: Bookmark
      operationId: bookmark
      security:
        - BearerAuth: []
      requestBody:
        description: Bookmark request body
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: MongoId
                  example: 6587a5abb1243e7fb1cc7cae
      responses:
        '200':
          description: Bookmark successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bookmark successfully
        '422':
          description: Invalid input
    delete:
      tags:
        - bookmark
      summary: Unbookmark
      description: Unbookmark
      operationId: Unbookmark
      security:
        - BearerAuth: []
      requestBody:
        description: Unbookmark request body
        content:
          application/json:
            schema:
              type: object
              properties:
                tweet_id:
                  type: MongoId
                  example: 6587a5abb1243e7fb1cc7cae
                user_id:
                  type: MongoId
                  example: 657a91169f40eec3e9363239
      responses:
        '200':
          description: Unbookmark successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unbookmark successfully
        '422':
          description: Invalid input

  # Search
  /search:
    get:
      tags:
        - search
      summary: 'Search tweet'
      description: 'Endpoint for search tweet'
      security:
        - BearerAuth: []
      parameters:
        - name: content
          in: query
          description: 'search content'
          required: true
          type: string
        - name: limit
          in: query
          description: 'maximum number of items returned'
          required: false
          type: integer
          default: 10
        - name: page
          in: query
          description: 'page'
          required: false
          type: integer
          default: 1
        - name: media_type
          in: query
          description: 'media type: image or video'
          required: false
          type: object
          properties:
            media_type:
              type: string
              enum:
                - video
                - image
          default: image
      responses:
        '200':
          description: Search te successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Search successfully
                  result:
                    $ref: '#/components/schemas/Search'
        '422':
          description: Invalid input

  # Conversation
  /conversations/receivers/{receiver_id}:
    get:
      tags:
        - conversation
      summary: 'Get conversation'
      description: 'Get conversation'
      security:
        - BearerAuth: []
      parameters:
        - name: sender_id
          in: query
          description: 'sender id'
          required: true
          type: MongoId
          example: 65870efa0a585eb27d47ee98
        - name: receiver_id
          in: query
          description: 'receiver id'
          required: true
          type: MongoId
          example: 65854378d5ed1370b388486c
        - name: page
          in: query
          description: 'page'
          required: false
          type: integer
          example: 1
        - name: limit
          in: query
          description: 'maximum number of items returned'
          required: false
          type: integer
          example: 10
      responses:
        '200':
          description: Get conversation successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get conversation successfully
                  result:
                    $ref: '#/components/schemas/Conversation'
        '422':
          description: Invalid input

  # tweet
  /tweets:
    post:
      tags:
        - tweets
      summary: 'Create tweets'
      description: 'Create tweets'
      security:
        - BearerAuth: []
      requestBody:
        description: Create tweet body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTweetBody'
        required: true
      responses:
        '200':
          description: Create tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Create tweet successfully
                  result:
                    type: array
                    example:
                      [
                        {
                          'user_id': '65870efa0a585eb27d47ee98',
                          'type': 0,
                          'audience': 1,
                          'content': '',
                          'parent_id': null,
                          'hashtags': [metoo, anti],
                          'mentions': [65870efa0a585eb27d47ee98, 6587c7e581f2ee4810c30b0b],
                          'medias': [],
                          'guest_views': 0,
                          'user_views': 1,
                          'created_at': '2023-12-24T05:55:26.482Z',
                          'updated_at': '2023-12-25T04:37:22.013Z'
                        }
                      ]
        '422':
          description: Invalid input

    get:
      tags:
        - tweets
      summary: 'Get tweets'
      description: 'Get tweets'
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: 'maximum number of items returned'
          required: false
          type: integer
          default: 10
        - name: page
          in: query
          description: 'page'
          required: false
          type: integer
          default: 1
      responses:
        '200':
          description: Get new feed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get new feed successfully
                  result:
                    type: object
                    properties:
                      tweets:
                        type: array
                        example:
                          [
                            {
                              'user_id': '65870efa0a585eb27d47ee98',
                              'type': 0,
                              'audience': 1,
                              'content': '',
                              'parent_id': null,
                              'hashtags': [metoo, anti],
                              'mentions': [65870efa0a585eb27d47ee98, 6587c7e581f2ee4810c30b0b],
                              'medias': [],
                              'guest_views': 0,
                              'user_views': 1,
                              'created_at': '2023-12-24T05:55:26.482Z',
                              'updated_at': '2023-12-25T04:37:22.013Z'
                            }
                          ]
                      totalPage:
                        type: integer
                        example: 3
                      limit:
                        type: integer
                        example: 10
                      page:
                        type: integer
                        example: 1
        '422':
          description: Invalid input
  /tweets/{tweet_id}/children:
    get:
      tags:
        - tweets
      summary: 'Get tweets children'
      description: 'Get tweets children'
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          description: maximum number of items returned
          required: false
          type: integer
          default: 10
        - name: page
          in: query
          description: 'page'
          required: false
          type: integer
          default: 1
        - name: tweet_type
          in: query
          description: type of tweet
          required: true
          type: number
          enum: [Tweet, Retweet, Comment, QuoteTweet]
          default: 2
      responses:
        '200':
          description: Get tweet children successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get tweet children successfully
                  result:
                    type: object
                    properties:
                      tweets:
                        type: array
                        example:
                          [
                            {
                              'user_id': '65870efa0a585eb27d47ee98',
                              'type': 0,
                              'audience': 1,
                              'content': '',
                              'parent_id': null,
                              'hashtags': [metoo, anti],
                              'mentions': [65870efa0a585eb27d47ee98, 6587c7e581f2ee4810c30b0b],
                              'medias': [],
                              'guest_views': 0,
                              'user_views': 1,
                              'created_at': '2023-12-24T05:55:26.482Z',
                              'updated_at': '2023-12-25T04:37:22.013Z'
                            }
                          ]
                      totalPage:
                        type: integer
                        example: 3
                      limit:
                        type: integer
                        example: 10
                      page:
                        type: integer
                        example: 1
                      tweet_type:
                        type: integer
                        example: 2
        '422':
          description: Invalid input
  /tweets/{tweet_id}:
    get:
      tags:
        - tweets
      summary: 'Get tweets by tweet id'
      description: 'Get tweets by tweet id'
      security:
        - BearerAuth: []
      parameters:
        - name: tweet_id
          in: path
          description: tweet id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get tweet successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get tweet successfully
                  result:
                    type: object
                    example:
                      {
                        'user_id': '65870efa0a585eb27d47ee98',
                        'type': 0,
                        'audience': 1,
                        'content': '',
                        'parent_id': null,
                        'hashtags': [metoo, anti],
                        'mentions': [65870efa0a585eb27d47ee98, 6587c7e581f2ee4810c30b0b],
                        'medias': [],
                        'guest_views': 0,
                        'user_views': 1,
                        'created_at': '2023-12-24T05:55:26.482Z',
                        'updated_at': '2023-12-25T04:37:22.013Z'
                      }
        '422':
          description: Invalid input

  # media
  /medias/upload-image:
    post:
      tags:
        - medias
      summary: 'Upload image'
      description: 'Upload image'
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload images successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload images successfully
                  result:
                    type: object
                    example:
                      {
                        'url': 'https://twitter-nodejs-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/images/9f67179812e66b659c704ff00.jpg',
                        'type': 0
                      }
        '422':
          description: Invalid input
  /medias/upload-video:
    post:
      tags:
        - medias
      summary: 'Upload video'
      description: 'Upload video'
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload videos successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Upload videos successfully
                  result:
                    type: object
                    example:
                      {
                        'url': 'https://twitter-nodejs-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/images/9f67179812e66b659c704ff00.jpg',
                        'type': 1
                      }
        '422':
          description: Invalid input

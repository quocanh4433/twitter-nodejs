components:
  schemas:
    LoginBody:
      type: object
      properties:
        email:
          type: string
          example: qa44@gmail.com
        password:
          type: string
          example: Qa@123456
    RegisterBody:
      type: object
      properties:
        name:
          type: string
          example: John Carter
        email:
          type: email
          example: hoquocanh.td+99@gmail.com
        password:
          type: string
          example: Qa@123456
        confirm_password:
          type: string
          example: Qa@123456
        date_of_birth:
          type: ISO8601
          example: 2023-06-08T10:17:31.096Z
    Authentication:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTY5MTQ2OTYyNn0.HTLX20cB7_z0c9c8FDg3MIx6RJEELHHlmJNZa94ku-o
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjRiZTBhZDJlNDNkMjQ2NDM5NGZlZWRiIiwidG9rZW5fdHlwZSI6MSwidmVyaWZ5IjoxLCJpYXQiOjE2OTEzODMyMjYsImV4cCI6MTcwMDAyMzIyNn0.bFnaBfxWl-Q48HCwAeMpNzZwTO9LEjcBd7Zyipjqr64
    CreateTweetBody:
      type: object
      properties:
        type:
          type: number
          enum: [Tweet, Retweet, Comment, QuoteTweet]
          example: 0
        audience:
          type: number
          enum: [Everyone, TwitterCircle]
          example: 1
        content:
          type: string
          example: Hello world
        parent_id:
          type: string
          example: null
        hashtags:
          type: array
          items:
            type: string
          example: [metoo, anti]
        mentions:
          type: array
          items:
            type: MongoId
          example: [65870efa0a585eb27d47ee98, 6587c7e581f2ee4810c30b0b]
        medias:
          type: array
          items:
            type: MongoId
          example: []
    ProfileUpdateBody:
      type: object
    UserRequestBodyUpdate:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2023-06-08T10:17:31.096Z
        bio:
          type: string
          example: 'This is my bio.'
        location:
          type: string
          example: 'San Francisco, CA'
        website:
          type: string
          example: 'www.example.com'
        username:
          type: string
          example: 'johndoe'
        avatar:
          type: string
          example: 'http:localhost:4000/images/avatars/johndoe.jpg'
        cover_photo:
          type: string
          example: 'http:localhost:4000/images/avatars/johndoe.jpg'
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 64be0ad2e43d2464394feedb
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2023-06-08T10:17:31.096Z
        created_at:
          type: string
          format: ISO8601
          example: 2023-03-08T12:00:00Z
        updated_at:
          type: string
          format: ISO8601
          example: 2023-03-08T12:00:00Z
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ['64be0ad2e43d2464394feedb', '64be0ad2e43d2464394feedc']
        bio:
          type: string
          example: 'This is my bio.'
        location:
          type: string
          example: 'San Francisco, CA'
        website:
          type: string
          example: 'www.example.com'
        username:
          type: string
          example: 'johndoe'
        avatar:
          type: string
          example: 'http:localhost:4000/images/avatars/johndoe.jpg'
        cover_photo:
          type: string
          example: 'http:localhost:4000/images/avatars/johndoe.jpg'
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
    Conversation:
      totalPage:
        type: integer
        example: 3
      conversations: 
        type: array
        example: [
            {
                "_id": "658f9c4f58272e99bc66caba",
                "sender_id": "65870efa0a585eb27d47ee98",
                "receiver_id": "65854378d5ed1370b388486c",
                "content": "hello 43",
                "created_at": "2023-12-30T04:27:59.035Z",
                "updated_at": "2023-12-30T04:27:59.035Z"
            },
            {
                "_id": "658f9c5358272e99bc66cabb",
                "sender_id": "65854378d5ed1370b388486c",
                "receiver_id": "65870efa0a585eb27d47ee98",
                "content": "hi 44",
                "created_at": "2023-12-30T04:28:03.468Z",
                "updated_at": "2023-12-30T04:28:03.468Z"
            }
        ]
    Search:
      type: object
      properties:
        limit:
          type: integer
          example: 10
        page:
          type: integer
          example: 1
        totalPage:
          type: integer
          example: 3
        tweet:
          type: array
          items:
            type: object
          example: [
            {
              "user_id": 65870efa0a585eb27d47ee98",
              "type": 1,
              "audience": 1,
              "content": "",
              "parent_id": "6587a5abb1243e7fb1cc7cae",
              "hashtags": [],
              "mentions": [],
              "medias": [],
              "guest_views": 0,
              "user_views": 1,
              "created_at": "2023-12-24T05:55:26.482Z",
              "updated_at": "2023-12-25T04:37:22.013Z"
            }
          ]
  securitySchemes:
    oAuth2:  
      type: oauth2
      description: This API uses OAuth 2
      flows:
        implicit:
          authorizationUrl: http://localhost:4000/users/auth/google
          scopes:
            read: read your account
            write: modify your account
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
